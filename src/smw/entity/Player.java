package smw.entity;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyListener;
import java.awt.geom.Point2D;
import java.awt.image.ImageObserver;

import smw.gfx.Sprite;
import smw.settings.Debug;
import smw.ui.PlayerControl;

public class Player extends Rectangle{
	/**
	 * Autogenerated!
	 */
	private static final long serialVersionUID = -4197702383138211374L;
	
	Sprite  sprite;
	PlayerPhysics physics;
	PlayerControl playerControl;
	Point2D position;
	final int playerIndex;
	
	public Player(PlayerControl playerControl, int playerIndex){	
		physics = new PlayerPhysics(playerControl);
		sprite  = new Sprite();
		position = new Point2D.Float();
		this.playerIndex = playerIndex;
	}
	
	public Image getImage(){
		return sprite.getImage();
	}
	
	public void init(int start_x, int start_y, String image){
		position.setLocation((double)start_x, (double)start_y);
		sprite.init(image);
	}
	
	public void move(Player[] players){
		physics.update();
		
		float dx = physics.getVelocityX();
		float dy = physics.getVelocityY();
		
		if(playerIndex == 0) System.out.println("Velocity per frame: " + dx + ", " + dy);
		
		sprite.update(dx, dy, physics.isJumping, physics.isSkidding);
		float newX, newY = 0;
		
		newX = (float) (position.getX() + dx);
		newY = (float) (position.getY() + dy);
		
		//TODO this is to simulate ground...
		if(newY > 500){
			newY = 500;
			physics.collideWithFloor();
		}
		
		boolean canMove = true;
		
		for(Player p : players){
			if(p.playerIndex != playerIndex){
				if(p.intersects(newX, newY, Sprite.IMAGE_WIDTH, Sprite.IMAGE_HEIGHT)){
					canMove = false;
					break;
				}
			}
		}
		
		if(canMove){
			position.setLocation(newX, newY);
		}
		
		//TODO might be a faster way (width/height never change)
		setBounds((int)position.getX(), (int)position.getY(), Sprite.IMAGE_WIDTH, Sprite.IMAGE_HEIGHT);
	}
	
	public void draw(Graphics2D graphics, ImageObserver observer){
		graphics.drawImage(sprite.getImage(), x, y, observer);
	}

	public final KeyListener getControls() {
	  return physics.playerControl;
  }
}
